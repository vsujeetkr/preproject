<?php

/**
 * @file
 * Adding classes to blocks.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;
use Drupal\block\BlockInterface;

/**
 * Implements hook_help().
 */
function block_id_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block_id module.
    case 'help.page.block_id':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extra field block ID is added for custom ID attribute.') . '</p>';
      $output .= '<p>' . t('Block ID helps to assign a unique ID to each block') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function block_id_block_presave(BlockInterface $entity) {
  if (empty($entity->getThirdPartySetting('block_id', 'id'))) {
    $entity->unsetThirdPartySetting('block_id', 'id');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_id_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('administer block id')) {

    /** @var \Drupal\block\BlockInterface $block */
    $block = $form_state->getFormObject()->getEntity();

    // This will automatically be saved in the third party settings.
    $form['third_party_settings']['#tree'] = TRUE;
    $form['third_party_settings']['block_id']['id'] = [
      '#type' => 'textfield',
      '#title' => t('Block ID'),
      '#description' => t("If you put a value here it'll replace the block's id."),
      '#default_value' => $block->getThirdPartySetting('block_id', 'id'),
    ];

    $form['#validate'][] = 'block_id_form_block_form_validate';
  }
}

/**
 * Form validate.
 */
function block_id_form_block_form_validate(&$form, FormStateInterface $form_state) {
  
  // If the block id value empty, skip that.
  if(empty($form_state->getValues()['third_party_settings']['block_id']['id'])) {
    return;
  }

  // get the id of the block being submitted
  $self = isset($form['id']['#default_value']) ? $form['id']['#default_value'] : null;
  
  // Get the id to be used.
  $inputs_id = $form_state->getValues()['third_party_settings']['block_id']['id'];

  // Block list those using block id field.
  $blocks = \Drupal::entityTypeManager()->getStorage('block')->loadMultiple();

  // remove current block
  if ($self) { unset($blocks[$self]); }
  
  if (!empty($blocks)) {
    foreach ($blocks as $ids) {

      // If $inputs_id is present in the array, it means it is already used by another block. Show a validation error.
      if ($ids->getThirdPartySetting('block_id', 'id') == $inputs_id) {
        $form_state->setErrorByName('third_party_settings][block_id][id', t('@block_id is already used by another block.', [
          '@block_id' => $inputs_id
        ]));
      }

    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function block_id_preprocess_block(&$variables) {
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block && $ids = $block->getThirdPartySetting('block_id', 'id')) {
      $id_array = explode(' ', $ids);
    	$variables['attributes']['id'] = $id_array;
    }
  }
}
